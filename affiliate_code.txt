<p class="lead">
                    And check out the products below that I think are hot items
                </p>



div with the pictures:

<div class="link">
                        <a href="https://amzn.to/3H79P9R" target="_blank">
                            <iframe srcdoc="<iframe sandbox='allow-popups allow-scripts allow-modals allow-forms allow-same-origin' style='width:120px;height:240px;' marginwidth='0' marginheight='0' scrolling='no' frameborder='0' src='//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ss&ref=as_ss_li_til&ad_type=product_link&tracking_id=affilimoney-20&language=en_US&marketplace=amazon&region=US&placement=B08QH3SGTC&asins=B08QH3SGTC&linkId=69f2d71b74389e109cdf234b2dd1f40e&show_border=true&link_opens_in_new_window=true'></iframe>"
  style="width:120px;height:240px;">"</iframe>
                            Click Here
                          </a>
                    </div>



sudo systemctl restart nginx
sudo vi /etc/nginx/sites-available/default
sudo pm2 restart 0
sudo nginx -s reload
sudo vi /etc/nginx/sites-available/default
sudo nginx -s reload
sudo vi /etc/nginx/sites-available/default
sudo nginx -s reload
sudo vi /etc/nginx/sites-available/default
sudo vi webpack.config.js


1. sites-available/default to /index.html
1. webpack: point to app.js


var HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
    mode: 'development',
    resolve: {
        extensions: ['.js', '.jsx']
    },
    module: {
        rules: [
            {
                test: /\.jsx?$/,
                loader: 'babel-loader'
            }
        ]
    },
    plugins: [new HtmlWebpackPlugin({
        template: './opt/mailchimp/public/index.html'
    })],
    devServer: {
        historyApiFallback: true
    }
}


MAILCHIMP
server {
  listen 80 default_server;
  server_name _;

   #react app & front-end files
  location / {
    root /opt/mailChimp/public;
    try_files $uri /index.html;
  }

  # node api reverse proxy
  location /signup {
    root /opt/mailChimp;
    try_files $uri /app.js =404;
    add_header 'Access-ControlAllow-Origin' '*';
    proxy_pass "http://localhost:5000";
  }
}






DEVPARTY
server {
  listen 80 default_server;
  server_name _;

  # react app & front-end files
  location / {
    root /opt/devParty/client/build;
    try_files $uri /index.html;
  }

  # node api reverse proxy
  location /api {
    root /opt/devParty/routes/api;
    try_files $uri /api/auth.js =404;
    add_header 'Access-ControlAllow-Origin' '*';
    proxy_pass "http://localhost:5000/";
  }
}


repaste in to revert to first, last, email

  //   Stringify the data

  
  // const postData = JSON.stringify(data);
  // const formData = new FormData();
  // formData.firstName = firstName;
  // formData.lastName = lastName;
  // formData.email = email;
  // formData.image = fs.readFileSync(newPath);
  // formData.save();


// // Set all options
  // const options = {
  //   url: "https://us13.api.mailchimp.com/3.0/lists/a1204496a9",
  //   method: "POST",
  //   // API key in header
  //   headers: {
  //     Authorization: "auth 3b6bff77fa5af57dfa83cd5350bb60e0-us13-us13",
  //   },
  //   // postData as payload
  //   body: postData,
  // };

  // Request with options and callback to handle response
  // Check for error, send to fail. If not fail, check response code is 200, redir > 200. If not, redir to fail
  // request(options, (err, response, body) => {
  //   if (err) {
  //     res.redirect("/fail.html");
  //   } else {
  //     if (response.statusCode === 200) {
  //       // postData.save();
  //       res.redirect("/success.html");
  //     }
  //   }
  // });


// const connect = async () => {
//   try {
//     await mongoose.connect(connectionString)
//     console.log('MongoDB Connected...')
//   } catch (err) {
//     console.log(err.message)
//     // exit process with failure
//     process.exit(1)
//   }
// }



the whole app, previously

// const express = require("express");
// const request = require("request");
// const bodyParser = require("body-parser");
// const path = require("path");
// const formidable = require("formidable");
// const fs = require("fs");
// const mongoose = require("mongoose");

// const app = express();

// // Bodyparser Middleware
// app.use(bodyParser.urlencoded({ extended: true }));

// // Static folder
// app.use(express.static(path.join(__dirname, "public")));

// app.get("/favicon.ico", (req, res) => {
//   res.redirect("/index.html");
// });

// // Connect to MongoDB
// mongoose
//   .connect("mongodb+srv://m001-student:m001-password@sandbox.7wsam.mongodb.net/partyHouse?retryWrites=true&w=majority", {
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
//   })
//   .then(() => console.log("Connected to MongoDB"))
//   .catch((err) => console.error("MongoDB connection error:", err));

// // Create a schema for the data you want to save in MongoDB
// const formDataSchema = new mongoose.Schema({
//   firstName: String,
//   lastName: String,
//   email: String,
//   image: String,
// });

// // Create a model based on the schema
// const FormData = mongoose.model("FormData", formDataSchema);

// app.post("/signup", async (req, res) => {
//   const form = formidable({ multiples: false });

//   try {
//     const { firstName, lastName, email } = req.body;

//     // Get the uploaded image file
//     const imageFile = req.files?.image;

//     // Check that all fields are filled
//     if (!firstName || !lastName || !email || !imageFile) {
//       res.redirect("/fail.html");
//       return;
//     }

//     // Move the uploaded image file to a designated folder
//     const newPath = path.join(__dirname, "public", "uploads", imageFile.name);
//     fs.renameSync(imageFile.path, newPath);

//     // Construct request data per API format with image file path added
//     const data = {
//       members: [
//         {
//           email_address: email,
//           status: "subscribed",
//           merge_fields: {
//             FNAME: firstName,
//             LNAME: lastName,
//             IMAGE: newPath, // Store the image file path in a merge field
//           },
//         },
//       ],
//     };

//     // Save form data to MongoDB
//     const formData = new FormData({
//       firstName,
//       lastName,
//       email,
//       image: newPath,
//     });
//     await formData.save();

//     // Send data to Mailchimp API
//     const postData = JSON.stringify(data);
//     const options = {
//       url: "https://us13.api.mailchimp.com/3.0/lists/a1204496a9",
//       method: "POST",
//       headers: {
//         Authorization: "auth 3b6bff77fa5af57dfa83cd5350bb60e0-us13-us13",
//       },
//       body: postData,
//     };

//     request(options, (err, response, body) => {
//       if (err) {
//         res.redirect("/fail.html");
//       } else {
//         if (response.statusCode === 200) {
//           res.redirect("/success.html");
//         } else {
//           res.redirect("/fail.html");
//         }
//       }
//     });
//   } catch (error) {
//     console.error("Error:", error);
//     res.redirect("/fail.html");
//   }
// });

// const PORT = process.env.PORT || 5000;

// app.listen(PORT, console.log(`Server started on ${PORT}`));








construct request data per api format

  const data = {
    members: [
      {
        email_address: email,
        merge_fields: {
          FNAME: firstName,
          LNAME: lastName,
        },
        images: image
        // image_file: image
      },
    ],
  };


  







i was getting empty {} data being sent to mdb becuase I was using this:
enctype="multipart/form-data"
in the form part of the html. 
The issue is your app expects JSON request bodies but you're sending multipart/form-data. Remove enctype="multipart/form-data" from your <form> and add in app.use(express.urlencoded()) to your Express middleware. Should all work as expected then. â€“ 
Phil
Now it works

Your Express app is only configured to handle application/json request bodies because you have only added the following body-parsing middleware

app.use(express.json())`
Your form is sending the request body as multipart/form-data which requires special middleware like Multer. Typically, you only need to use multipart/form-data when uploading files which you are not doing.

To solve these, remove enctype="multipart/form-data" from your <form> and add in the application/x-www-form-urlencoded body-parsing middleware

app.use(express.urlencoded());
